from telebot import TeleBot
from buttons import Buttons
from tabulate import tabulate
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from data_base.database import DATABASE
from data_base.querys import Querys

states = {"is_income": False, "is_expense": False}
category_expense = ""


def register_callback_handlers(bot: TeleBot):
    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        global states, category_expense
        db = DATABASE()
        q = Querys()
        buttons = Buttons()
        user_id = call.from_user.id
        data = call.data
        match data:

            case "add_income":
                states["is_income"] = True
                markup = InlineKeyboardMarkup()
                main_menu_button = types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                markup.add(main_menu_button)
                bot.edit_message_text(
                    text="–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    reply_markup=markup
                )

            case "add_expense":
                states["is_expense"] = True
                markup = buttons.expense_or_income_category_menu()
                bot.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "summary":
                markup = buttons.summary_menu()
                bot.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "main_menu":
                markup = buttons.main_menu()
                name = call.from_user.first_name
                if name == "Ana":
                    name = "‚ù§–ù–∞—Å—Ç–µ–Ω—å–∫–∞‚ù§"
                elif name == "Silence":
                    name = "–î–∏–º–∞ü¶æ"
                for key in states:
                    states[key] = False
                bot.edit_message_text(
                    text="–ü—Ä–∏–≤–µ—Ç, {0} –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(name),
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )

            case "now_money":
                all_money = db.execute_query(q.sum_money_users())
                dif = db.execute_query(q.difference_income_expense())
                all_money = float(all_money[0][0])
                dif = float(dif[0][0])
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    text="–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {0}\n–î–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã: {1}".format(all_money, dif),
                    message_id=call.message.message_id
                )
                markup = buttons.summary_menu()
                bot.send_message(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "sum_expense":
                all_expenses = db.execute_query(q.all_expenses_on_month())
                my_expenses = db.execute_query(q.all_user_expenses_for_the_month(call.message.chat.id))
                all_expenses = float(all_expenses[0][0])
                my_expenses = float(my_expenses[0][0])
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã : {1}"
                         "\n–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã : {0}".format(all_expenses, my_expenses),
                )
                markup = buttons.summary_menu()
                bot.send_message(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "sum_income":
                my_income = db.execute_query(q.all_user_income_for_the_month(call.message.chat.id))
                all_income = db.execute_query(q.all_income_on_month())
                my_income = float(my_income[0][0]) if my_income and my_income[0][0] is not None else 0.0
                all_income = float(all_income[0][0]) if all_income and all_income[0][0] is not None else 0.0

                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ú–æ–∏ –¥–æ—Ö–æ–¥—ã : {1}"
                         "\n–û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã : {0}".format(all_income, my_income),
                )
                markup = buttons.summary_menu()
                bot.send_message(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "table_month":
                markup = buttons.expense_or_income_category_menu("table_month")
                bot.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—Å–∞—Ö–æ–¥–æ–≤",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )

            case "table_all_expenses":
                table = db.fetch_dataframe(q.table_expense_all_time())
                formatted_table = tabulate(
                    table,
                    headers="keys",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    tablefmt="pretty"  # –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "plain", "fancy_grid" –∏ —Ç.–¥.)
                )
                bot.edit_message_text(
                    text="–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è : \n\n{0}".format(formatted_table),
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è

                )
                markup = buttons.summary_menu()
                bot.send_message(
                    text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                    reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                )
            case "":
                pass
        categories = db.execute_query(q.categories_name())

        for tup in categories:
            for category in tup:
                if data == "table_month:{0}".format(category):
                    table = db.fetch_dataframe(q.table_expense_on_month(category))
                    formatted_table = tabulate(
                        table,
                        headers="keys",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        tablefmt="pretty"  # –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "plain", "fancy_grid" –∏ —Ç.–¥.)
                    )
                    bot.edit_message_text(
                        text="–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Å—è—Ü –ø–æ {0} : \n\n{1}".format(category, formatted_table),
                        chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                        message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è

                    )
                    markup = buttons.summary_menu()
                    bot.send_message(
                        text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                        reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    )
                elif data == "expense:{0}".format(category):
                    category_expense = category
                    markup = InlineKeyboardMarkup()
                    main_menu_button = types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    markup.add(main_menu_button)
                    bot.edit_message_text(
                        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:{0}".format(category),
                        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞
                        message_id=call.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                        reply_markup=markup
                    )

    @bot.message_handler(content_types=['text'])
    def user_query(message):
        global category_expense
        buttons = Buttons()
        db = DATABASE()
        q = Querys()
        users_tg_id = db.execute_query(q.users_telegram_id())
        users_tg_id_list = [row[0] for row in users_tg_id]




        if states["is_income"] == True:
            bot.delete_message(message.chat.id, message.id - 1)
            result = db.execute_transaction(q.transaction_income(message))
            bot.send_message(
                text=result,
                chat_id=message.chat.id,  # ID —á–∞—Ç–∞
            )
            markup = buttons.main_menu()
            bot.send_message(
                text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_id=message.chat.id,  # ID —á–∞—Ç–∞
                reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            )
            for id in users_tg_id_list:
                if id in users_tg_id_list:
                    continue
                else:
                    bot.send_message(
                        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {1}".format(message.from_user.first_name,message.text),  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        chat_id=id,  # ID —á–∞—Ç–∞
                    )

        elif states["is_expense"] == True:
            bot.delete_message(message.chat.id, message.id - 1)
            result = db.execute_transaction(q.transaction_expenses(message, category_expense))
            category_expense = ""
            bot.send_message(
                text=result,
                chat_id=message.chat.id,  # ID —á–∞—Ç–∞
            )
            markup = buttons.main_menu()
            bot.send_message(
                text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_id=message.chat.id,  # ID —á–∞—Ç–∞
                reply_markup=markup  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            )
            for id in users_tg_id_list:
                if id in users_tg_id_list:
                    continue
                else:
                    bot.send_message(
                        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –ø–æ—Ç—Ä–∞—Ç–∏–ª {1}".format(message.from_user.first_name,message.text),  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        chat_id=id,  # ID —á–∞—Ç–∞
                    )
        else:
            markup = InlineKeyboardMarkup()
            main_menu_button = types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            markup.add(main_menu_button)
            bot.send_message(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –Ω–∞–µ–∑–¥–æ–º",
                chat_id=message.chat.id,
                reply_markup=markup
            )

#
# from telebot import TeleBot
# from states import get_state, set_state, States
# from keyboards.main_menu import main_menu
# from keyboards.sub_menu import sub_menu
#
# def register_callback_handlers(bot: TeleBot):
#     @bot.callback_query_handler(func=lambda call: True)
#     def callback_handler(call):
#         user_id = call.from_user.id
#         current_state = get_state(user_id)
#
#         if call.data == "button_1":
#             if current_state == States.DEFAULT:
#                 bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–Ω–æ–ø–∫—É 1 –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DEFAULT.")
#                 set_state(user_id, States.CHOICE_ONE)
#                 bot.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–Ω–æ–ø–∫—É 1. –¢–µ–ø–µ—Ä—å –≤—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOICE_ONE.",
#                                       chat_id=call.message.chat.id,
#                                       message_id=call.message.message_id,
#                                       reply_markup=sub_menu())
#             elif current_state == States.CHOICE_ONE:
#                 bot.answer_callback_query(call.id, "–í—ã —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 1, –Ω–æ —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOICE_ONE.")
#
#         elif call.data == "button_2":
#             if current_state == States.DEFAULT:
#                 bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–Ω–æ–ø–∫—É 2 –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DEFAULT.")
#                 set_state(user_id, States.CHOICE_TWO)
#                 bot.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–Ω–æ–ø–∫—É 2. –¢–µ–ø–µ—Ä—å –≤—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOICE_TWO.",
#                                       chat_id=call.message.chat.id,
#                                       message_id=call.message.message_id,
#                                       reply_markup=sub_menu())
#             elif current_state == States.CHOICE_TWO:
#                 bot.answer_callback_query(call.id, "–í—ã —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 2, –Ω–æ —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOICE_TWO.")
#
#     @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
#     def back_to_main_handler(call):
#         user_id = call.from_user.id
#         set_state(user_id, States.DEFAULT)
#         bot.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
#                               chat_id=call.message.chat.id,
#                               message_id=call.message.message_id,
#                               reply_markup=main_menu())
